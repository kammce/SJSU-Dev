#!/bin/bash

#
# Utils
#
#Checks for installed programs on machine
function programInstalled
{
	local returning=1
	type $1 >/dev/null 2>&1 || { local returning=0; }
	echo "$returning"
}

# Function Displays Green Check for installed programs
# Else Displays Red Cross for Missing Programs
function check
{
	if [ $1 == 1 ]
	then
		printf "\e[32m✔"
		echo $(tput sgr0)
	else
		printf "\e[31m✘"
		echo $(tput sgr0)
	fi
}

# Make sure only non-root users can run our script
if [[ $EUID -eq 0 ]]
then
   echo "SJSU-DEV installer script must NOT be run as root! " 1>&2
   exit 1
fi

echo " ──────────────────────────────────────────────────┐"
echo "            Acquiring sudo privileges               "
echo "└────────────────────────────────────────────────── "
sudo echo "" || exit 1

# Stash the tool directory
TOOLDIR=$(dirname "$0")/tools
# Get System Architecture
ARCH=$(uname -m)
# Get System Operating System
OS=$(uname -s)
# Get base path
BASE=`pwd`
# Define name of the arm version we are downloading
ARM_GCC=gcc-arm-none-eabi-6-2017-q2-update

echo " ──────────────────────────────────────────────────┐"
echo ""
echo "  Starting SJSU-DEV-Linux Environment Setup Script  "
echo ""
echo "└────────────────────────────────────────────────── "
sleep 1
echo " ──────────────────────────────────────────────────┐"
echo "              Detecting your platform               "
echo "└────────────────────────────────────────────────── "
if [[ "$ARCH" != 'x86_64' || "$ARCH" == "amd64" ]]
then
	echo 'Only 64-bit architecture systems are supported!'
	exit 1
fi
echo " ──────────────────────────────────────────────────┐"
echo "            Checking Basic Dependencies             "
echo "└────────────────────────────────────────────────── "
PYTHON_INSTALLED=$(check $(programInstalled python))
PIP_INSTALLED=$(check $(programInstalled pip))
GIT_INSTALLED=$(check $(programInstalled git))
# Output results of dependencies
echo "python        $PYTHON_INSTALLED"
echo "pip           $PIP_INSTALLED"
echo "git           $GIT_INSTALLED"
# Concat results
REQUIREMENTS_MET="$PYTHON_INSTALLED $PIP_INSTALLED $GIT_INSTALLED"
# This lines uses wildcards to check if there exists a ✘ in the
# Concatenated string above. If it does, terminate setup
if [[ $REQUIREMENTS_MET == *"✘"* ]]
then
	echo "Missing requirement(s). Please install manually. Setup exiting."
	exit 1
fi

echo " ──────────────────────────────────────────────────┐"
echo "               System Dependent Setup               "
echo "└────────────────────────────────────────────────── "
cd $TOOLDIR
case "$OS" in
	Linux) # Linux Case
		echo "Operating System: Linux"
		SJSUONEDEV=/dev/ttyUSB0
		echo " ───────────────────────────────────────────────────┐"
		echo "     Installing OpenOCD, Git, Python, Curl           "
		echo "└─────────────────────────────────────────────────── "
		sudo apt -y install openocd
		sudo apt -y install git python curl
		echo " ──────────────────────────────────────────────────┐"
		echo "           Downloading gcc-arm-embedded             "
		echo "└────────────────────────────────────────────────── "
		curl -C - -LO https://developer.arm.com/-/media/Files/downloads/gnu-rm/6-2017q2/$ARM_GCC-linux.tar.bz2
		GCC_PKG=$ARM_GCC-linux.tar.bz2
		echo " ──────────────────────────────────────────────────┐"
		echo "      Adding current user to '$GROUP' group"
		echo "└────────────────────────────────────────────────── "
		THE_GROUP=$(getent group | grep 'dial' | cut -d: -f1)
		sudo adduser $USER $THE_GROUP
		echo " ───────────────────────────────────────────────────┐"
		echo "        Upgrading PIP & Python's Virtualenv          "
		echo "└─────────────────────────────────────────────────── "
		sudo -H pip install --upgrade pip
		sudo -H pip install --upgrade virtualenv
		echo " ───────────────────────────────────────────────────┐"
		echo "                 Installing GDBGUI                   "
		echo "└─────────────────────────────────────────────────── "
		sudo -H pip install --upgrade gdbgui
		;;

	Darwin) # OS X Case
		echo "Operating System: Mac OSX Darvin"
		echo " ──────────────────────────────────────────────────┐"
		echo "           Downloading gcc-arm-embedded             "
		echo "└────────────────────────────────────────────────── "
		curl -C - -LO https://developer.arm.com/-/media/Files/downloads/gnu-rm/6-2017q2/$ARM_GCC-mac.tar.bz2
		GCC_PKG=$ARM_GCC-mac.tar.bz2
		SJSUONEDEV=/dev/tty.usbserial-A503JOLS
		# ========= Xcode ========== #
		# xcode-select --install &> /dev/null	# Install cli tools
		# sudo xcodebuild -license # Accept User Agreement
		;;

	*)	#Default if Operating System other than Mac or Linux
		echo "Only Linux, OSX, and WSL (Windows Subsystem Linux) systems are supported! Exiting..."
		exit 1
		;;
esac

echo " ──────────────────────────────────────────────────┐"
echo "            Extracting gcc-arm-embedded             "
echo "└────────────────────────────────────────────────── "
tar --extract \
	--verbose \
	--bzip2 \
	--file=$GCC_PKG\
	--exclude='share/doc' 2> /dev/null

cd $BASE

echo " ───────────────────────────────────────────────────┐"
echo "                Setting Up Hyperload                 "
echo "└─────────────────────────────────────────────────── "
git clone --depth=1 https://github.com/kammce/Hyperload.git $TOOLDIR/Hyperload/
cd $TOOLDIR/Hyperload/ && ./setup
cd $BASE

echo " ───────────────────────────────────────────────────┐"
echo "                Setting Up Telemetry                 "
echo "└─────────────────────────────────────────────────── "
git clone --depth=1 https://github.com/kammce/Telemetry.git $TOOLDIR/Telemetry
cd $TOOLDIR/Telemetry/ && ./setup
cd $BASE

echo " ───────────────────────────────────────────────────┐"
echo "          Generating Environment Variables           "
echo "└─────────────────────────────────────────────────── "

cat > env.sh <<EOL
#!/bin/bash
# Setup a base directory:
BASE=$BASE

# SJSUOne Board Settings:
SJSUONEDEV=$SJSUONEDEV # Set this to your board ID
SJSUONEBAUD=38400

# Project Target Settings:
# Sets the binary name, defaults to "firmware" (Optional)
PROJ=firmware

# Sets which DBC to generate, defaults to "DBG"
ENTITY=DBG

# Compiler and library settings:
# Selects compiler version to use
PATH=\$PATH:\$BASE/tools/$ARM_GCC/bin:\$BASE/tools/Hyperload:\$BASE/tools/Telemetry
LIB_DIR="\$BASE/firmware/lib"

# Export everything to the environment
export PATH
export PROJ
export ENTITY
export LIB_DIR
export SJSUONEDEV
export SJSUONEBAUD
export MAKEFLAGS
EOL

echo " ───────────────────────────────────────────────────┐"
echo "        Linking Files into Firmware projects         "
echo "└─────────────────────────────────────────────────── "

for PROJECT in HelloWorld FreeRTOS Telemetry Unittest
do
	# Place env.sh link into project folder
	ln -s -f $BASE/env.sh firmware/$PROJECT/env.sh
	# Place makefile link into project folder
	ln -s -f $BASE/makefile firmware/$PROJECT/makefile
	# Place Unit test template folder into project folder
	ln -s -f $BASE/tools/Unittest-Template/README.md firmware/$PROJECT/test/README.md
	# Copy simple tests into project folder
	cp -rf $BASE/tools/Unittest-Template/simple-test/ firmware/$PROJECT/test/
	# Place the unit test makefile link into project folder
	ln -s -f $BASE/makefile.test firmware/$PROJECT/test/simple-test/makefile
done

echo " ───────────────────────────────────────────────────┐"
echo "                   SETUP COMPLETE!                   "
echo "                                                     "
echo " IF THIS IS YOUR FIRST TIME RUNNING THE SETUP SCRIPT "
echo "             PLEASE RESTART YOUR SYSTEM              "
echo "         TO LOAD CODE INTO YOUR SJONE BOARD          "
echo "└─────────────────────────────────────────────────── "