#!/bin/bash

#
# Utils
#
#Checks for installed programs on machine
function programInstalled {
  local returning=1
  type $1 >/dev/null 2>&1 || { local returning=0; }
  echo "$returning"
}

#Function Displays Green Check for installed programs
#Else Displays Red Cross for Missing Programs
function check {
	if [ $1 == 1 ]; then
    	printf "\e[32m✔"
  		echo $(tput sgr0)
	else
    	printf "\e[31m✘"
  		echo $(tput sgr0)
  	fi
}

# Make sure only non-root users can run our script
if [[ $EUID -eq 0 ]]; then
   echo "SJSU-DEV installer script must NOT be run as root! " 1>&2
   exit 1
fi

echo " ──────────────────────────────────────────────────┐"
echo "            Acquiring sudo privileges               "
echo "└────────────────────────────────────────────────── "
sudo echo "" || SystemExit

# Stash the tool directory
TOOLDIR=$(dirname "$0")/tools
ARCH=$(uname -m)
BASE=`pwd`
ARM_GCC=gcc-arm-none-eabi-6-2017-q2-update

echo " ──────────────────────────────────────────────────┐"
echo "  Starting SJSU-DEV-Linux Environment Setup Script  "
echo "└────────────────────────────────────────────────── "
sleep 1
echo " ──────────────────────────────────────────────────┐"
echo "              Basic Dependencies                    "
echo "└────────────────────────────────────────────────── "
#TODO Install missing dependencies after check
echo "python        $(check $(programInstalled python))"
echo "pip           $(check $(programInstalled pip))"
echo "git           $(check $(programInstalled git))"

echo " ──────────────────────────────────────────────────┐"
echo "              Detecting your platform               "
echo "└────────────────────────────────────────────────── "
if [[ "$ARCH" != 'x86_64' || "$ARCH" == "amd64" ]]; then
	echo 'Your system is not supported! Only 64-bit Linux and OSX systems are supported.'
	SystemExit
fi

case $( uname -s ) in
	Linux)	#Linux Case
		echo Operating System: Linux
		cd $TOOLDIR
		echo " ──────────────────────────────────────────────────┐"
        echo "           Downloading gcc-arm-embedded             "
        echo "└────────────────────────────────────────────────── "
		curl -C - -LO https://developer.arm.com/-/media/Files/downloads/gnu-rm/6-2017q2/$ARM_GCC-linux.tar.bz2
	    GCC_PKG=$ARM_GCC-linux.tar.bz2
	    SJSUONEDEV=/dev/ttyUSB0

		THE_GROUP=$(getent group | grep 'dial' | cut -d: -f1)
        echo " ──────────────────────────────────────────────────┐"
        echo "      Adding current user to '$GROUP' group"
        echo "└────────────────────────────────────────────────── "
        sudo adduser $USER $THE_GROUP

		echo " ───────────────────────────────────────────────────┐"
	    echo "     Installing OpenOCD, Git, Python, Curl           "
	    echo "└─────────────────────────────────────────────────── "
	    sudo apt -y install openocd
        sudo apt-get -y install git python curl

	    echo " ───────────────────────────────────────────────────┐"
        echo "        Installing PIP + Python Virtualenv           "
        echo "└─────────────────────────────────────────────────── "
        sudo -H pip install --upgrade pip
        sudo -H pip install --upgrade virtualenv

        echo " ───────────────────────────────────────────────────┐"
        echo "                 Installing GDBGUI                   "
        echo "└─────────────────────────────────────────────────── "
        sudo -H pip install --upgrade gdbgui
		;;

	Darwin)	#Mac Case
	    echo "Operating System Kernel: Mac OSX Darvin"
	    cd $TOOLDIR
	    echo " ──────────────────────────────────────────────────┐"
        echo "           Downloading gcc-arm-embedded             "
        echo "└────────────────────────────────────────────────── "
	    curl -C - -LO https://developer.arm.com/-/media/Files/downloads/gnu-rm/6-2017q2/$ARM_GCC-mac.tar.bz2
	    GCC_PKG=$ARM_GCC-mac.tar.bz2
	    SJSUONEDEV=/dev/tty.usbserial-A503JOLS

        #                        ========= Xcode ==========                           #
        xcode-select --install &> /dev/null	#Install cli tools
        sudo xcodebuild -license #Accept User Agreement
		;;

	*)	#Default if Operating System other than Mac or Linux
		echo Other
		exit 1
		;;
esac

if [[ ! -d "bin" && -f "$GCC_PKG" ]]; then
	echo " ──────────────────────────────────────────────────┐"
	echo "            Extracting gcc-arm-embedded             "
	echo "└────────────────────────────────────────────────── "
	tar --extract \
		--verbose \
		--bzip2 \
		--file=$GCC_PKG 2> /dev/null
fi

cd ..   # Exiting Tools Directory

echo " ───────────────────────────────────────────────────┐"
echo "                Installing Hyperload                 "
echo "└─────────────────────────────────────────────────── "
git clone --depth=1 https://github.com/kammce/Hyperload.git $TOOLDIR/Hyperload/
cd $TOOLDIR/Hyperload/ && ./setup
cd ../../

echo " ───────────────────────────────────────────────────┐"
echo "                Installing Telemetry                 "
echo "└─────────────────────────────────────────────────── "
git clone --depth=1 https://github.com/kammce/Telemetry.git $TOOLDIR/Telemetry
cd $TOOLDIR/Telemetry/ && ./setup
cd ../../

echo " ───────────────────────────────────────────────────┐"
echo "          Generating Environment Variables           "
echo "└─────────────────────────────────────────────────── "

cat > env.sh <<EOL
#!/bin/bash
# Setup a base directory:
BASE=$BASE

# SJSUOne Board Settings:
SJSUONEDEV="$SJSUONEDEV" # Set this to your board ID
SJSUONEBAUD=38400

# Project Target Settings:
# Sets the binary name, defaults to "firmware" (Optional)
PROJ=firmware

# Sets which DBC to generate, defaults to "DBG"
ENTITY=DBG

# Compiler and library settings:
# Selects compiler version to use
PATH=\$PATH:\$BASE/tools/$ARM_GCC/bin:\$BASE/tools/Hyperload:\$BASE/tools/Telemetry
LIB_DIR="\$BASE/firmware/lib"

# Make system settings:
# Number of jobs = 4
# Tune this to nthreads (f.eks. my system has a quad core with two threads per core = 4 threads)
MAKEFLAGS=" -j 4"

# Export everything to the environment
export PATH
export PROJ
export ENTITY
export LIB_DIR
export SJSUONEDEV
export SJSUONEBAUD
export MAKEFLAGS
EOL

echo " ──────────────────────────────────────────────────────────────────┐"
echo "               Linking Files into Firmware projects                 "
echo "└────────────────────────────────────────────────────────────────── "

ln -s -f $BASE/env.sh firmware/FreeRTOS/env.sh
ln -s -f $BASE/env.sh firmware/HelloWorld/env.sh
ln -s -f $BASE/env.sh firmware/Telemetry/env.sh

ln -s -f $BASE/makefile firmware/FreeRTOS/makefile
ln -s -f $BASE/makefile firmware/HelloWorld/makefile
ln -s -f $BASE/makefile firmware/Telemetry/makefile

ln -s -f $BASE/tools/Unittest-Template/README.md firmware/FreeRTOS/test/README.md
ln -s -f $BASE/tools/Unittest-Template/README.md firmware/HelloWorld/test/README.md
ln -s -f $BASE/tools/Unittest-Template/README.md firmware/Telemetry/test/README.md

# rm -rf firmware/HelloWorld/test/simple_test
# rm -rf firmware/FreeRTOS/test/simple_test
# rm -rf firmware/HelloWorld/test/simple_test

cp -rf tools/Unittest-Template/simple-test/ firmware/FreeRTOS/test/
cp -rf tools/Unittest-Template/simple-test/ firmware/HelloWorld/test/
cp -rf tools/Unittest-Template/simple-test/ firmware/Telemetry/test/

ln -s -f $BASE/makefile.test firmware/FreeRTOS/test/simple-test/makefile
ln -s -f $BASE/makefile.test firmware/HelloWorld/test/simple-test/makefile
ln -s -f $BASE/makefile.test firmware/Telemetry/test/simple-test/makefile

echo
echo " ──────────────────────────────────────────────────────────────┐"
echo "                      Setup complete!                           "
echo "                                                                "
echo "  PLEASE LOGOUT AND BACK IN to load code into your SJOne Board  "
echo "└────────────────────────────────────────────────────────────── "
echo