#!/bin/bash

#########
# Utils #
#########

# Make sure only non-root users can run our script
if [[ $EUID -eq 0 ]]
then
   echo "SJSU-DEV installer script must NOT be run as root! " 1>&2
   exit 1
fi

echo " ──────────────────────────────────────────────────┐"
echo "            Acquiring sudo privileges               "
echo "└────────────────────────────────────────────────── "
sudo echo "" || exit 1
# Stash the tool directory
TOOLDIR=$(dirname "$0")/tools
# Get System Architecture
ARCH=$(uname -m)
# Get System Operating System
OS=$(uname -s)
# Get base path
BASE=`pwd`
# Define name of the arm version we are downloading
ARM_GCC=gcc-arm-none-eabi-6-2017-q2-update

echo " ──────────────────────────────────────────────────┐"
echo ""
echo "  Starting SJSU-DEV-Linux Environment Setup Script  "
echo ""
echo "└────────────────────────────────────────────────── "
sleep 1
echo " ──────────────────────────────────────────────────┐"
echo "              Detecting your platform               "
echo "└────────────────────────────────────────────────── "
if [[ "$ARCH" != 'x86_64' || "$ARCH" == "amd64" ]]
then
	echo 'Only 64-bit architecture systems are supported!'
	exit 1
fi
echo " ──────────────────────────────────────────────────┐"
echo "               System Dependent Setup               "
echo "└────────────────────────────────────────────────── "
cd $TOOLDIR
case "$OS" in
	Linux) # Linux Case
		echo "Operating System: Linux"
		SJSUONEDEV=/dev/ttyUSB0
        echo " ───────────────────────────────────────────────────┐"
        echo "               Updating Apt listings                 "
        echo "└─────────────────────────────────────────────────── "
        sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
        sudo apt update
        echo " ───────────────────────────────────────────────────┐"
        echo "                Installing OpenOCD                   "
        echo "└─────────────────────────────────────────────────── "
        sudo apt -y install openocd
        echo " ───────────────────────────────────────────────────┐"
        echo "        Installing build-essentials (make)           "
        echo "└─────────────────────────────────────────────────── "
        sudo apt -y install build-essential
		echo " ───────────────────────────────────────────────────┐"
		echo "         Updating Git, Python, PIP, and Curl         "
		echo "└─────────────────────────────────────────────────── "
		sudo apt -y install git python python-pip curl
		echo " ───────────────────────────────────────────────────┐"
		echo "                Installing OpenOCD                   "
		echo "└─────────────────────────────────────────────────── "
		sudo apt -y install openocd
		echo " ──────────────────────────────────────────────────┐"
		echo "      Adding current user to '$GROUP' group         "
		echo "└────────────────────────────────────────────────── "
		THE_GROUP=$(getent group | grep 'dial' | cut -d: -f1)
		sudo adduser $USER $THE_GROUP
		echo " ──────────────────────────────────────────────────┐"
		echo "           Downloading gcc-arm-embedded             "
		echo "└────────────────────────────────────────────────── "
		curl -C - -LO https://developer.arm.com/-/media/Files/downloads/gnu-rm/6-2017q2/$ARM_GCC-linux.tar.bz2
		GCC_PKG=$ARM_GCC-linux.tar.bz2
		;;

	Darwin) # OS X Case
		echo "Operating System: Mac OSX Darwin"
		SJSUONEDEV=/dev/tty.usbserial-A503JOLS
        echo " ───────────────────────────────────────────────────┐"
        echo "    Install XCode Command Line Tools (GCC, make)     "
        echo "└─────────────────────────────────────────────────── "
        xcode-select --install &> /dev/null	# Install Command Line tools (make etc...)
        sudo xcodebuild -license accept # Accept User Agreement
        echo " ───────────────────────────────────────────────────┐"
        echo "        Installing PIP via bootstrap.pypa.io         "
        echo "└─────────────────────────────────────────────────── "
        curl https://bootstrap.pypa.io/get-pip.py | python2.7
		echo " ──────────────────────────────────────────────────┐"
		echo "           Downloading gcc-arm-embedded             "
		echo "└────────────────────────────────────────────────── "
		curl -C - -LO https://developer.arm.com/-/media/Files/downloads/gnu-rm/6-2017q2/$ARM_GCC-mac.tar.bz2
		GCC_PKG=$ARM_GCC-mac.tar.bz2
		;;

	*)	#Default if Operating System other than Mac or Linux
		echo "Only Linux, OSX, and WSL (Windows Subsystem Linux) systems are supported! Exiting..."
		exit 1
		;;
esac

echo " ──────────────────────────────────────────────────┐"
echo "            Extracting gcc-arm-embedded             "
echo "└────────────────────────────────────────────────── "
tar --extract \
	--verbose \
	--bzip2 \
	--file=$GCC_PKG\
	--exclude='share/doc' 2> /dev/null
cd $BASE
echo " ───────────────────────────────────────────────────┐"
echo "                   Upgrading PIP                     "
echo "└─────────────────────────────────────────────────── "
sudo -H pip2.7 install --upgrade pip
echo " ───────────────────────────────────────────────────┐"
echo "            Upgrading Python's Virtualenv            "
echo "└─────────────────────────────────────────────────── "
sudo -H pip2.7 install --upgrade virtualenv
echo " ───────────────────────────────────────────────────┐"
echo "                Setting Up Hyperload                 "
echo "└─────────────────────────────────────────────────── "
git clone --depth=1 https://github.com/kammce/Hyperload.git $TOOLDIR/Hyperload/
cd $TOOLDIR/Hyperload/ && ./setup
cd $BASE
echo " ───────────────────────────────────────────────────┐"
echo "                Setting Up Telemetry                 "
echo "└─────────────────────────────────────────────────── "
git clone --depth=1 https://github.com/kammce/Telemetry.git $TOOLDIR/Telemetry
cd $TOOLDIR/Telemetry/ && ./setup
cd $BASE
echo " ───────────────────────────────────────────────────┐"
echo "          Generating Environment Variables           "
echo "└─────────────────────────────────────────────────── "
cat > env.sh <<EOL
#!/bin/bash
# Setup a base directory:
SJBASE=$BASE

# SJSUOne Board Settings:
SJDEV=$SJSUONEDEV # Set this to your board ID
SJBAUD=38400

# Project Target Settings:
# Sets the binary name, defaults to "firmware" (Optional)
SJPROJ=firmware

# Sets which DBC to generate, defaults to "DBG"
ENTITY=DBG

# Compiler and library settings:
# Selects compiler version to use
PATH=\$PATH:\$SJBASE/tools/gcc-arm-none-eabi-6-2017-q2-update/bin
SJLIBDIR="\$SJBASE/firmware/lib"

# Export everything to the environment
export SJBASE
export SJDEV
export SJBAUD
export SJPROJ
export ENTITY
export PATH
export SJLIBDIR
EOL

echo " ───────────────────────────────────────────────────┐"
echo "      Linking Files to Firmware Project Folder       "
echo "└─────────────────────────────────────────────────── "
source env.sh
./tools/link_projects.sh
echo " ───────────────────────────────────────────────────┐"
echo "                   SETUP COMPLETE!                   "
echo "                                                     "
echo " IF THIS IS YOUR FIRST TIME RUNNING THE SETUP SCRIPT "
echo "             PLEASE RESTART YOUR SYSTEM              "
echo "         TO LOAD CODE INTO YOUR SJONE BOARD          "
echo "└─────────────────────────────────────────────────── "
